const db = connect("mongodb://localhost/bookstore");
console.log(db);

// doing this here instead of the shell directly
const frenchBooks = [
    {
        title: "La peste",
        authour: "Albert Camus",
        pages: 275,
        genres: ["dystopian", "non-fiction", "dark"],
        rating: 6,
    },
    {
        title: "Dans le gant de fer",
        authour: "Claire Martin",
        pages: 325,
        genres: ["history", "non-fiction"],
        rating: 7,
    },
    {
        title: "La mano negra",
        authour: "Romain Molina",
        pages: 245,
        genres: ["football", "non-fiction"],
        rating: 8,
    },
];
console.log("============= Books ================");

const books = db.books.find();
db.books.insertMany(frenchBooks);
console.log(books);
console.log("============ Books by Brandon =================");

// filtering through our data
const booksByBrandon = db.books.find({ authour: "Brandon Sanderson" }); // find books by Brandon Sanderson
console.log(booksByBrandon);
/**
 * same as above but the second argument is an object represents the select properties we want returned in our data
 * as opposed to the example above which returns all the properties
 * it seems the number 1 translates to "true" for returning that property
 * is it safe to assume that by default (without including the second argument) all the properties implicitly have a value of 1 for the second argument, hence why all of them show?
 * the id generated by mongodb is always included
 * regardez
 */
console.log("============ Books by Brandon Condensed =================");
const booksByBrandonCondensed = db.books.find({ authour: "Brandon Sanderson" }, { title: 1, authour: 1 });
console.log(booksByBrandonCondensed);

// we can do this (filter desired properties for our data) for all our books as well. not just a filtered set of books
console.log("============= Books Condensed ================");
const booksCondensed = db.books.find({}, { title: 1, authour: 1 });
console.log(booksCondensed);

// find one book with findOne(). in this case we are retrieving it by id
const book = db.books.findOne({ _id: ObjectId("64876e64bf5d03d5bf3d558c") });
console.log(book);
